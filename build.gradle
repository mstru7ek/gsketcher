// c:\Users\micha\.gradle\gradle.properties

import org.gradle.internal.os.OperatingSystem
import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
}


group 'com.mstruzek'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
}

compileJava {
    targetCompatibility = 17
    sourceCompatibility = 17
}

def cooLayoutDebug = true

dependencies {
    implementation group: 'gov.nist.math', name: 'jama', version: '1.0.3'
    implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'

    if(cooLayoutDebug) {
        implementation group: 'colt', name: 'colt-c', version: '2.0.0-SNAPSHOT'      /// COO layout debug requirements.
    } else {
        implementation group: 'colt', name: 'colt', version: '1.2.0'                /// java 1.2
    }
}


def JAVA_JDK_JAVAH = Jvm.current().getJavacExecutable().getAbsoluteFile().toString()


task generateCHeader(type:Exec) {
    commandLine "${JAVA_JDK_JAVAH}",'-classpath','src/main/java/','-h','src/main/native/src/','src/main/java/com/mstruzek/jni/SolverHandle.java'
}


/// Native Build with CMake
def nativeSourcePath = projectDir.absolutePath + "/src/main/native/"
def nativeBuildPath = buildDir.absolutePath + "/target/cmake-build"
def distributionPath = projectDir.absolutePath + "/lib"

var outputLibFile = nativeBuildPath + (OperatingSystem.current().isWindows()
        ? "/Debug/libgsketcherjni.dll"
        : "/Debug/libgsketcherjni.so")


tasks.register("compileNativeSetup") {
    inputs.files(fileTree(nativeSourcePath).matching {
        include "CMakeLists.txt"
    })
    inputs.files(fileTree(nativeBuildPath).matching{
        include "CMakeLists.txt"
    })
    outputs.file(file(nativeBuildPath + "CMakeLists.txt"))
    doLast {
        ant.delete(dir: nativeBuildPath)
        ant.mkdir(dir: nativeBuildPath)
        ant.exec(dir: nativeBuildPath, failonerror: true, executable: "cmake")  {
            arg (value: nativeSourcePath)
        }
    }
}


tasks.register("compileNative") {
    inputs.files(fileTree(nativeSourcePath).matching {
        include "**/*.cu"
        include "**/*.cuh"
        include "**/*.cpp"
        include "**/*.h"
    })
    outputs.file(outputLibFile)
    doLast{
        ant.echo("build process")
        ant.exec(dir: nativeBuildPath, failonerror: true, executable: "cmake") {
            arg(value:"--build")
            arg(value: ".")
        }
        ant.echo(message: "deploy shared lib")
        ant.mkdir(dir: distributionPath)
        ant.copy(todir:distributionPath, file:  outputLibFile)
    }
}

tasks.compileNative.dependsOn(tasks.compileNativeSetup)

tasks.compileJava.dependsOn(tasks.compileNative)


tasks.register("cleanNative") {
    doLast {
        ant.delete(dir: nativeBuildPath, verbose: true, includeEmptyDirs:true)
    }
}

tasks.clean.dependsOn(tasks.cleanNative)





