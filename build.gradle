plugins {
    id 'java'
}


group 'com.mstruzek'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}




compileJava {
    targetCompatibility = 17
    sourceCompatibility = 17
}

dependencies {

    implementation group: 'colt', name: 'colt', version: '1.2.0'
    implementation group: 'gov.nist.math', name: 'jama', version: '1.0.3'

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'

}



def JAVA_JDK = "/usr/lib/jvm/java-17-openjdk-17.0.3.0.5-0.1.ea.el8.x86_64"
def JAVA_JDK_JAVAH = "${JAVA_JDK}/bin/javah"

task generateCHeader(type:Exec) {    
    commandLine JAVA_JDK_JAVAH, '-jni' , '-v','-classpath','src/main/java/','-o','src/main/native/src/com_mstruzek_jni_JNISolverGate.h_','com.mstruzek.jni.JNISolverGate'
}

/// Native Build with CMake
def nativeSourcePath = projectDir.absolutePath + "/src/main/native/"
def nativeBuildPath = buildDir.absolutePath + "/target/cmake-build"

def compileNative = tasks.register("compile-native") {
    doLast{
        ant.echo("compile native with cmake infrastructure")

        ant.delete(dir: nativeBuildPath)
        ant.mkdir(dir: nativeBuildPath)

        ant.exec(dir: nativeBuildPath, failonerror: true, executable: "cmake")  {
            arg (value: nativeSourcePath)
        }

        ant.echo("build directory generated")

        ant.exec(dir: nativeBuildPath, failonerror: true, executable: "cmake") {
            arg(value:"--build")
            arg(value: ".")
        }

        ant.echo(message: "shared lib build")
    }
}



tasks.compileJava.dependsOn(compileNative)

