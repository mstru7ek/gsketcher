import org.gradle.internal.os.OperatingSystem
import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
}


group 'com.mstruzek'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

compileJava {
    targetCompatibility = 17
    sourceCompatibility = 17
}

dependencies {
    implementation group: 'colt', name: 'colt', version: '1.2.0'
    implementation group: 'gov.nist.math', name: 'jama', version: '1.0.3'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
}


def JAVA_JDK_JAVAH = Jvm.current().getJavacExecutable().getAbsoluteFile().toString()


task generateCHeader(type:Exec) {    
    commandLine "${JAVA_JDK_JAVAH}",'-classpath','src/main/java/','-h','src/main/native/src/','src/main/java/com/mstruzek/jni/JNISolverGate.java'
}


/// Native Build with CMake
def nativeSourcePath = projectDir.absolutePath + "/src/main/native/"
def nativeBuildPath = buildDir.absolutePath + "/target/cmake-build"
def distributionPath = projectDir.absolutePath + "/lib"




def compileNative = tasks.register("compile-native") {
    doLast{
        ant.echo("compile native with cmake infrastructure")

        ant.delete(dir: nativeBuildPath)
        ant.mkdir(dir: nativeBuildPath)

        ant.exec(dir: nativeBuildPath, failonerror: true, executable: "cmake")  {
            arg (value: nativeSourcePath)
        }

        ant.echo("build directory generated")

        ant.exec(dir: nativeBuildPath, failonerror: true, executable: "cmake") {
            arg(value:"--build")
            arg(value: ".")
        }

        ant.echo(message: "shared lib build")


        ant.mkdir(dir: distributionPath)


        if (OperatingSystem.current().isWindows()) {
            ant.copy(todir:distributionPath, file:  nativeBuildPath + "/Debug/libgsketcherjni.dll")
        } else {
            ant.copy(todir:distributionPath, file: nativeBuildPath + "/Debug/libgsketcherjni.so")
        }

    }
}

// tasks.compileJava.dependsOn(compileNative)


def cleanNative = tasks.register("clean-native") {
    doLast {
        ant.delete(dir: nativeBuildPath)
    }
}

tasks.clean.dependsOn(cleanNative)





